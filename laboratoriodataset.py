# -*- coding: utf-8 -*-
"""laboratoriodataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/damisuki/335499c5706d8ce27ce124b0a676dc3a/laboratoriodataset.ipynb
"""

import plotly.graph_objects as go
import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import glob
from google.colab import drive
from google.colab import drive
drive.mount('/content/drive')

ruta_de_acesso = '/content/drive/MyDrive/Programación 2023 upso Sergio coronel/datasets'

archivos = os.listdir(ruta_de_acesso)
archivos

dataframes = {}

for archivo in archivos:
  if archivo.endswith('.csv'):
    mes = archivo.split('_')[3].split('.')[0]
    ruta_completa = os.path.join(ruta_de_acesso,archivo)
    df = pd.read_csv(ruta_completa)
    df_ventas = df.copy()

  df_ventas['Cantidad Pedida'] = pd.to_numeric(df_ventas['Cantidad Pedida'], errors='coerce')
  df_ventas['Precio Unitario'] = pd.to_numeric(df_ventas['Precio Unitario'], errors='coerce')

  df_ventas = df_ventas.loc[~df_ventas['Cantidad Pedida'].isna()]
  df_ventas = df_ventas.loc[~df_ventas['Precio Unitario'].isna()]

  df_ventas = df_ventas.dropna()

  df_ventas['Cantidad Pedida'] = df_ventas['Cantidad Pedida'].astype(int)
  df_ventas['Precio Unitario'] = df_ventas['Precio Unitario'].astype(float)


  dataframes[mes] = df_ventas

  dataframes

def extraer_datos(datos):
  datos['Fecha de Pedido'] = pd.to_datetime(df_ventas['Fecha de Pedido'])
  datos['Hora'] = datos['Fecha de Pedido'].dt.hour
  datos['Dia'] = datos['Fecha de Pedido'].dt.day
  return datos

meses = ['Enero','Febrero','Marzo','Abril','Mayo','Junio','Julio','Agosto','Septiembre','Octubre','Noviembre','Diciembre']

totales_ventas = []
nombres_meses = []

for mes in meses:
  dataframe_mes = dataframes[mes]
  dataframes_mes = extraer_datos(dataframe_mes)

  total_ventas_mes = dataframe_mes['Cantidad Pedida'].sum()
  totales_ventas.append(total_ventas_mes)
  nombres_meses.append(mes)

totales_ventas

fig = go.Figure()

fig.add_trace(go.Bar(
      x=nombres_meses,
      y=totales_ventas,
      yaxis="y",
      name="Unidades Vendidas",
      marker = dict(color= totales_ventas, colorscale = 'RdYlGn',colorbar = dict(title = "Total de ventas")),
      text = totales_ventas,
      textposition = 'auto'
))

fig.update_layout(
    title="Unidades vendidas por mes",
    xaxis=dict(title="Meses"),

    yaxis=dict(title="Unidades vendidas",side="left")
)

fig.show()

ingreso_total = []

for mes in meses:
    dataframe_mes = dataframes[mes]
    dataframes_mes = extraer_datos(dataframe_mes)

    ingreso_total_mes = (dataframe_mes['Cantidad Pedida'] * dataframe_mes['Precio Unitario']).sum()
    ingreso_total.append(ingreso_total_mes)

nombres_meses = meses

ingreso_total

import plotly.express as px


df_ingresos = pd.DataFrame({'Mes': nombres_meses, 'Ingreso Total': ingreso_total})


fig = px.bar(df_ingresos, x='Mes', y='Ingreso Total', title='Ingreso Total por Mes')
fig.update_xaxes(type='category')
text = ingreso_total
textposition = 'auto'



fig.show()

##
fig = go.Figure()

fig.add_trace(go.Bar(
      x=nombres_meses,
      y=ingreso_total,
      yaxis="y",
      name="Ingreso Total",
      marker = dict(color= ingreso_total, colorscale = 'RdYlGn',colorbar = dict(title = "Ingreso Total")),
      text = ingreso_total,
      textposition = 'auto'
))

fig.update_layout(
    title="Ingreso por mes",
    xaxis=dict(title="Meses"),

    yaxis=dict(title="Ingreso total",side="left")
)

fig.show()

Horas = list(range(24))
fig = go.Figure()


for mes in meses :
  dataframe_mes = dataframes[mes]
  dataframes_mes = extraer_datos(dataframes_mes)

  Ventas_por_hora= dataframe_mes.groupby('Hora')['Cantidad Pedida'].count()

  fig.add_trace(go.Scatter(
      x=Horas,
      y=Ventas_por_hora,
      mode='lines',
      name=mes,

      line=dict(shape='spline', smoothing=1.3,width=2)))


fig.update_layout(

      title="Unidades vendidas por hora",
      xaxis=dict(title="Hora",tickvals=Horas),
      yaxis=dict(title="Unidades vendidas", side="left"))

fig.show()

fig = go.Figure()

horas_analizadas = [11, 12, 19]

for hora in horas_analizadas:
    total_productos_vendidos = []


    for mes in meses:
      dataframe_mes = dataframes[mes]
      dataframes_mes = extraer_datos(dataframe_mes)

      ventas_hora = dataframe_mes[dataframe_mes['Hora'] == hora]

      total_productos_vendidos.append(ventas_hora['Cantidad Pedida'].sum())

    fig.add_trace(go.Scatter(
        x=meses,
        y=total_productos_vendidos,
        mode='lines',
        name=f'{hora}horas',
        line = dict(width= 2, shape= 'spline')
    ))


fig.update_layout(
    title="Unidades vendidas por hora",
    xaxis=dict(title="Hora", tickvals=Horas),
    yaxis=dict(title="Unidades vendidas", side="left")
)

fig.show()

fig = go.Figure()

horas_analizadas = [11, 12, 19]

for hora in horas_analizadas:
    total_productos_vendidos = []

    for mes in meses:
        dataframe_mes = dataframes[mes]
        dataframes_mes = extraer_datos(dataframe_mes)

        ventas_hora = dataframes_mes[dataframes_mes['Hora'] == hora]

        total_productos_vendidos.append(ventas_hora['Cantidad Pedida'].sum())

    fig.add_trace(go.Scatter(
        x=meses,
        y=total_productos_vendidos,
        mode='lines',
        name=f'{hora} horas',
        line=dict(width=2, shape='spline')
    ))

fig.update_layout(
    title="Unidades vendidas por hora",
    xaxis=dict(title="Mes"),
    yaxis=dict(title="Unidades vendidas", side="left"),
    legend=dict(title="Horas"),
)

fig.show()

# Separo la direccion de envio en calle ciudad y PO BOX
direccion_df = df_ventas['Dirección de Envio'].str.split(', ',expand=True)
direccion_df.columns = ['Calle','Ciudad','PO BOX']

# Separo el PO BOX en Estado y Cod Postal
direccion_df[['Estado', 'Cod Postal']] = direccion_df['PO BOX'].str.split(' ',expand=True)
df_ventas_desglosado = pd.concat([df_ventas,direccion_df],axis=True)
df_ventas_desglosado

# Agrupo por estado y cantidad de productos vendidos
ventas_por_estado = df_ventas_desglosado.groupby('Estado')['Cantidad Pedida'].sum()

# Reseteo el indice
ventas_por_estado = ventas_por_estado.reset_index(inplace=False)
ventas_por_estado

import plotly.express as px


# Hago un plot de Estados Unidos
fig = px.choropleth(ventas_por_estado, locations='Estado', locationmode='USA-states',color='Cantidad Pedida',
                           color_continuous_scale="RdYlGn",
                           scope="usa",
                          title= 'Ventas por estado'
                          )

fig.show()

import plotly.graph_objects as go

# Crear un gráfico de barras horizontales
fig = go.Figure()

fig.add_trace(go.Bar(
    x=ventas_por_estado['Cantidad Pedida'],
    y=ventas_por_estado['Estado'],
    orientation='h',  # Barras horizontales
    marker=dict(color='royalblue'),  # Color de las barras
))

fig.update_layout(
    title='Ventas por Estado',
    xaxis_title='Cantidad Pedida',
    yaxis_title='Estado',
    template='plotly_white',  # Estilo del gráfico
)

fig.show()

import plotly.graph_objects as go

# Crear un gráfico de barras verticales
fig = go.Figure()

fig.add_trace(go.Bar(
    x=ventas_por_estado['Estado'],
    y=ventas_por_estado['Cantidad Pedida'],
    marker=dict(color='royalblue'),  # Color de las barras
))

fig.update_layout(
    title='Ventas por Estado',
    xaxis_title='Estado',
    yaxis_title='Cantidad Pedida',
    template='plotly_white',  # Estilo del gráfico
)

fig.show()

import plotly.graph_objects as go

# Crear un gráfico 3D de unidades vendidas por hora y mes
fig = go.Figure(data=[
    go.Surface(z=[total_productos_vendidos, total_productos_vendidos, total_productos_vendidos],
               x=meses,
               y=horas_analizadas)
])

fig.update_layout(
    scene=dict(
        xaxis_title='Mes',
        yaxis_title='Hora',
        zaxis_title='Unidades Vendidas',
    ),
    title='Unidades Vendidas por Hora y Mes (Gráfico 3D)'
)

fig.show()